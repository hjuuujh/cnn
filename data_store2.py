# -*- coding: utf-8 -*-
"""data_store2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B0sGOpKHaURD09HWXH4UOPjIL0PgAvir
"""

# Commented out IPython magic to ensure Python compatibility.
!pip install git+https://github.com/deepvision-class/starter-code

from __future__ import print_function
from __future__ import division
import torch
import coutils
import random
import math
import matplotlib.pyplot as plt
from torchvision.utils import make_grid
from PIL import Image

# for plotting
# %matplotlib inline
plt.rcParams['figure.figsize'] = (10.0, 8.0) # set default size of plots
plt.rcParams['image.interpolation'] = 'nearest'
plt.rcParams['image.cmap'] = 'gray'
to_float = {'dtype': torch.float, 'device': 'cpu'}
to_float_cuda = {'dtype': torch.float, 'device': 'cuda'}
to_double = {'dtype': torch.double, 'device': 'cpu'}
to_double_cuda = {'dtype': torch.double, 'device': 'cuda'}
to_long = {'dtype': torch.long, 'device': 'cpu'}
to_long_cuda = {'dtype': torch.long, 'device': 'cuda'}

from google.colab import drive
drive.mount('/content/drive') #  안되면 '/content/gdrive' 사용
import numpy as np 
import os
import pandas as pd 
import pickle

path = "/content/drive/Shared drives/3조 통계적 기계 학습/data3/covid19/"

train_path = '/content/drive/Shared drives/3조 통계적 기계 학습/data/train/'
val_path = "/content/drive/Shared drives/3조 통계적 기계 학습/data/val/"
test_path = "/content/drive/Shared drives/3조 통계적 기계 학습/data/test/"

print(os.listdir(train_path))
print(os.listdir(val_path))
print(os.listdir(test_path))

x_train_Normal = []
x_train_Virus = []
x_train_COVID19 = []
x_train_Bacteria = []

x_val_Normal = []
x_val_Virus = []
x_val_COVID19 = []
x_val_Bacteria = []

x_test_Normal = []
x_test_Virus = []
x_test_COVID19 = []
x_test_Bacteria = []

x_train_Normal = os.listdir(os.path.join(train_path,'Normal'))
x_train_Virus = os.listdir(os.path.join(train_path,"Virus"))
x_train_COVID19 = os.listdir(os.path.join(train_path,"COVID-19"))
x_train_Bacteria = os.listdir(os.path.join(train_path,"Bacteria"))

x_val_Normal = os.listdir(os.path.join(val_path,"Normal"))
x_val_Virus = os.listdir(os.path.join(val_path,"Virus"))
x_val_COVID19 = os.listdir(os.path.join(val_path,"COVID-19"))
x_val_Bacteria = os.listdir(os.path.join(val_path,"Bacteria"))

x_test_Normal = os.listdir(os.path.join(test_path,"Normal"))
x_test_Virus = os.listdir(os.path.join(test_path,"Virus"))
x_test_COVID19 = os.listdir(os.path.join(test_path,"COVID-19"))
x_test_Bacteria = os.listdir(os.path.join(test_path,"Bacteria"))

print(x_train_Normal)

x_img_train = []
x_img_val = []
x_img_test = []

y1_train = []
y2_train = []

y1_val = []
y2_val = []

y1_test = []
y2_test = []

for img_name in x_train_Normal :
  img = Image.open(train_path + "Normal/" + img_name).convert("L")
  resize_img = img.resize((224, 224))
  re_img_arr=np.asarray(resize_img)
  arr = (re_img_arr - re_img_arr.min()) / (re_img_arr.max() - re_img_arr.min())
  x_img_train.append(arr)
  y1_train.append(0)
  y2_train.append(0)

for img_name in x_train_Virus :
  img = Image.open(train_path + "Virus/" + img_name).convert("L")
  resize_img = img.resize((224, 224))
  re_img_arr=np.asarray(resize_img)
  arr = (re_img_arr - re_img_arr.min()) / (re_img_arr.max() - re_img_arr.min())
  x_img_train.append(arr)
  y1_train.append(1)
  y2_train.append(1)

print(1)

for img_name in x_train_COVID19 :
  img = Image.open(train_path + "COVID-19/" + img_name).convert("L")
  resize_img = img.resize((224, 224))
  re_img_arr=np.asarray(resize_img)
  arr = (re_img_arr - re_img_arr.min()) / (re_img_arr.max() - re_img_arr.min())
  x_img_train.append(arr)
  y1_train.append(1)
  y2_train.append(2)
print(1)

for img_name in x_train_Bacteria :
  img = Image.open(train_path + "Bacteria/" + img_name).convert("L")
  resize_img = img.resize((224, 224))
  re_img_arr=np.asarray(resize_img)
  arr = (re_img_arr - re_img_arr.min()) / (re_img_arr.max() - re_img_arr.min())
  x_img_train.append(arr)
  y1_train.append(1)
  y2_train.append(3)

print(np.array(x_img_train).shape)
print(np.array(y1_train).shape)
print(np.array(y2_train).shape)

val = []

for img_name in x_val_Normal :
  img = Image.open(val_path + "Normal/" + img_name).convert("L")
  resize_img = img.resize((224, 224))
  re_img_arr=np.asarray(resize_img)
  arr = (re_img_arr - re_img_arr.min()) / (re_img_arr.max() - re_img_arr.min())
  x_img_val.append(arr)
  y1_val.append(0)
  y2_val.append(0)
  
for img_name in x_val_Virus :
  img = Image.open(val_path + "Virus/" + img_name).convert("L")
  resize_img = img.resize((224, 224))
  re_img_arr=np.asarray(resize_img)
  arr = (re_img_arr - re_img_arr.min()) / (re_img_arr.max() - re_img_arr.min())
  x_img_val.append(arr)
  y1_val.append(1)
  y2_val.append(1)
  
for img_name in x_val_COVID19 :
  img = Image.open(val_path + "COVID-19/" + img_name).convert("L")
  resize_img = img.resize((224, 224))
  re_img_arr=np.asarray(resize_img)
  arr = (re_img_arr - re_img_arr.min()) / (re_img_arr.max() - re_img_arr.min())
  x_img_val.append(arr)
  y1_val.append(1)
  y2_val.append(2)

for img_name in x_val_Bacteria :
  img = Image.open(val_path + "Bacteria/" + img_name).convert("L")
  resize_img = img.resize((224, 224))
  re_img_arr=np.asarray(resize_img)
  arr = (re_img_arr - re_img_arr.min()) / (re_img_arr.max() - re_img_arr.min())
  x_img_val.append(arr)
  y1_val.append(1)
  y2_val.append(3)

print(np.array(x_img_val).shape)
print(np.array(y1_val).shape)
print(np.array(y2_val).shape)

test = []

for img_name in x_test_Normal :
  img = Image.open(test_path + "Normal/" + img_name).convert("L")
  resize_img = img.resize((224, 224))
  re_img_arr=np.asarray(resize_img)
  arr = (re_img_arr - re_img_arr.min()) / (re_img_arr.max() - re_img_arr.min())
  x_img_test.append(arr)
  y1_test.append(0)
  y2_test.append(0)
  
for img_name in x_test_Virus :
  img = Image.open(test_path + "Virus/" + img_name).convert("L")
  resize_img = img.resize((224, 224))
  re_img_arr=np.asarray(resize_img)
  arr = (re_img_arr - re_img_arr.min()) / (re_img_arr.max() - re_img_arr.min())
  x_img_test.append(arr)
  y1_test.append(1)
  y2_test.append(1)
  
for img_name in x_test_COVID19 :
  img = Image.open(test_path + "COVID-19/" + img_name).convert("L")
  resize_img = img.resize((224, 224))
  re_img_arr=np.asarray(resize_img)
  arr = (re_img_arr - re_img_arr.min()) / (re_img_arr.max() - re_img_arr.min())
  x_img_test.append(arr)
  y1_test.append(1)
  y2_test.append(2)

for img_name in x_test_Bacteria :
  img = Image.open(test_path + "Bacteria/" + img_name).convert("L")
  resize_img = img.resize((224, 224))
  re_img_arr=np.asarray(resize_img)
  arr = (re_img_arr - re_img_arr.min()) / (re_img_arr.max() - re_img_arr.min())
  x_img_test.append(arr)
  y1_test.append(1)
  y2_test.append(3)

print(np.array(x_img_test).shape)
print(np.array(y1_test).shape)
print(np.array(y2_test).shape)

x_np_train=np.array(x_img_train)
x_np_val=np.array(x_img_val)
x_np_test=np.array(x_img_test)

x_tensor_train = torch.from_numpy(x_np_train).clone()
x_tensor_val = torch.from_numpy(x_np_val).clone()
x_tensor_test = torch.from_numpy(x_np_test).clone()

x_tensor_train.type_as(torch.cuda.FloatTensor())
x_tensor_test.type_as(torch.cuda.FloatTensor())
x_tensor_val.type_as(torch.cuda.FloatTensor())

y1_np_train=np.array(y1_train)
y1_np_val=np.array(y1_val)
y1_np_test=np.array(y1_test)

y1_tensor_train = torch.from_numpy(y1_np_train).clone()
y1_tensor_val = torch.from_numpy(y1_np_val).clone()
y1_tensor_test = torch.from_numpy(y1_np_test).clone()

y2_np_train=np.array(y2_train)
y2_np_val=np.array(y2_val)
y2_np_test=np.array(y2_test)

y2_tensor_train = torch.from_numpy(y2_np_train).clone()
y2_tensor_val = torch.from_numpy(y2_np_val).clone()
y2_tensor_test = torch.from_numpy(y2_np_test).clone()

print(x_tensor_train.shape)
print(y1_tensor_train.shape)
print(y2_tensor_train.shape)

print(x_tensor_val.shape)
print(y1_tensor_val.shape)
print(y2_tensor_val.shape)

print(x_tensor_test.shape)
print(y1_tensor_test.shape)
print(y2_tensor_test.shape)

import pickle

os.listdir('/content/drive/Shared drives/3조 통계적 기계 학습') # check 해보기, 역시 안되면 gdrive로 사용

train = {'x' : x_tensor_train,
         'y1' : y1_tensor_train,
         'y2' : y2_tensor_train}

val = {'x' : x_tensor_val,
         'y1' : y1_tensor_val,
         'y2' : y2_tensor_val}

test = {'x' : x_tensor_test,
         'y1' : y1_tensor_test,
         'y2' : y2_tensor_test}

with open('/content/drive/Shared drives/3조 통계적 기계 학습/data_hyewon/train3.pickle', 'wb') as handle:
    pickle.dump(train, handle, protocol=pickle.HIGHEST_PROTOCOL)

with open('/content/drive/Shared drives/3조 통계적 기계 학습/data_hyewon/val3.pickle', 'wb') as handle:
    pickle.dump(val, handle, protocol=pickle.HIGHEST_PROTOCOL)

with open('/content/drive/Shared drives/3조 통계적 기계 학습/data_hyewon/test3.pickle', 'wb') as handle:
    pickle.dump(test, handle, protocol=pickle.HIGHEST_PROTOCOL)

x_tensor_train.mean()

x_tensor_train.std()

